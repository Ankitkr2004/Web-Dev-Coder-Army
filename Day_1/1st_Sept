# Web Development Course

## How Does Internet Work

### **Principle 1: The Need to Share Information**

The most fundamental truth is that we have information on one computer (Computer A) and we want it to be on another computer (Computer B). These computers are not in the same room.

How do we solve this? The simplest, most primitive way is to physically carry the information (e.g., on a USB stick). This works, but it's slow and doesn't scale. We need a direct, electronic connection.

So, we run a cable (like an ethernet cable or a fiber optic line) between Computer A and Computer B. We can now send electrical signals or pulses of light down this cable. We can agree on a simple code: a high-voltage signal means "1," and a low-voltage signal means "0."

We have just created the most basic form of a network: a **direct link**. We can now send bits (1s and 0s) between two computers.

---

### **Principle 2: The Problem of Scale**

This works for two computers. But what if we have three computers (A, B, and C) and they all need to talk to each other? We would need a cable from A to B, from B to C, and from A to C. For four computers, we'd need six cables. For 100 computers, we'd need 4,950 cables.

This is a failure of scale. Connecting every machine to every other machine directly is physically impossible.

The logical solution is to have a central device. Every computer connects to this one central point (let's call it a **Switch**). When Computer A wants to talk to Computer C, it sends the message to the switch, and the switch forwards it only to Computer C.

We have just invented a **Local Network**. A group of computers in close proximity (like an office or a home) can now communicate efficiently.

---

### **Principle 3: The Problem of Connecting Networks**

Now, our office has a local network. Another office across town also has its own local network. How does a computer on our network talk to a computer on their network?

We face the same scaling problem. We can't run a wire from every computer in our office to every computer in theirs.

The logical solution is to connect the *networks themselves*. We need a special, dedicated computer that is connected to *our* network and also connected to *their* network. Its only job is to pass messages, or "route" traffic, from one network to the other. Let's call this device a **Router**.

Now, if we want to connect to a third network, we just connect our router to their router. Suddenly, we can build a massive, sprawling web by connecting networks to other networks.

This is the fundamental truth of the Internet. The **Internet is a "network of networks."**

---

### **Principle 4: The Problem of Finding Anyone (Addressing)**

We have built a global web of interconnected networks. If I'm on my computer in my office, how do I send a message to a specific server in another country? There are millions of computers. I need a unique address for every single device.

This gives rise to the need for a universal addressing system. Just like the postal service needs a unique street address for every house in the world, our network of networks needs a unique address for every connected device.

This is the reason the **IP Address (Internet Protocol Address)** exists. It's a unique label (e.g., `142.250.184.142`) assigned to each device. When a router sees a message, it looks at the destination IP address and decides where to forward it next.

---

### **Principle 5: The Problem of Reliability and Fairness**

If I want to send a large file, like a 1-hour video, it is a huge stream of data. If I try to send it all at once:

1. I would completely monopolize the connection, and no one else could send anything until my video was done.
2. If even a single bit of information gets corrupted during the transfer, the entire file is ruined, and I have to start over.

This is inefficient and unreliable. The logical solution is to break the large file into many thousands of small, numbered pieces. Let's call them **Packets**.

Each packet contains:

- A small piece of the data (payload).
- The destination IP address.
- The sender's IP address.
- A sequence number (so they can be reassembled in correct order).

Packets can travel independently across the internet. The receiving computer reassembles them, checks for missing packets, and requests retransmission if needed.

This system of rules is called a **Protocol**. The main one used on the internet is **TCP/IP (Transmission Control Protocol / Internet Protocol)**.

---

## Summary from First Principles

1. **Problem:** Share data between two computers.  
   **Solution:** A **direct physical link**.

2. **Problem:** Connect many computers efficiently.  
   **Solution:** A **local network** with a central switch.

3. **Problem:** Connect many networks efficiently.  
   **Solution:** An **internetwork** connected by **routers**.

4. **Problem:** Find a specific computer globally.  
   **Solution:** A universal **IP Address**.

5. **Problem:** Send data reliably without errors.  
   **Solution:** **TCP/IP** using packets.

---

## IP Address

**IPv4 (Internet Protocol version 4)**

- 32-bit number, divided into 4 sections (0–255 each).  
  Example: `172.217.16.142`
- Total: ~4.3 billion unique addresses.
- Scarcity led to **public vs private IPs**.

### Public IP

- Your **global, unique address** on the internet.  
- Assigned by ISP.  
- Example: Servers hosting Google, Netflix, etc.

### Private IP

- Used **inside local networks** only.  
- Assigned by your router.  
- Reserved ranges:  
  - `10.0.0.0 – 10.255.255.255`  
  - `172.16.0.0 – 172.31.255.255`  
  - `192.168.0.0 – 192.168.255.255`

---

## IPv6

- Uses **128-bit** addresses.  
- Total possible: `2^128` (~340 undecillion).  
- Example:  


---

## MAC Address

- **Unique hardware ID** burned into network devices.  
- 48-bit number written in hexadecimal.

Examples:
- `3C:22:FB:A3:B4:C5`
- `3C-22-FB-A3-B4-C5`
- `3c22.fba3.b4c5`

### Find MAC Address

**Windows:**
```bash
ipconfig /all
